layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  local VENV=$(poetry env list --full-path | cut -d' ' -f1)
  if [[ -z $VENV || ! -d $VENV/bin ]]; then
    log_error 'No poetry virtual environment found. Use `poetry install` to create one first.'
    exit 2
  fi

  export VIRTUAL_ENV=$VENV
  export POETRY_ACTIVE=1
  PATH_add "$VENV/bin"
}
layout_poetry


export CODEARTIFACT_DOMAIN=ephodtech-pypi
export CODEARTIFACT_OWNER=905819100089
export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain ${CODEARTIFACT_DOMAIN} --domain-owner ${CODEARTIFACT_OWNER} --query authorizationToken --output text --profile ephod`
export CODEARTIFACT_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${CODEARTIFACT_DOMAIN} --domain-owner ${CODEARTIFACT_OWNER} --repository ephod --format pypi --query repositoryEndpoint --output text`
poetry config http-basic.ephod aws ${CODEARTIFACT_AUTH_TOKEN}

# export AWS_ACCESS_KEY_ID=AKIA2WDGRWGOWMPVCT5F
# export AWS_SECRET_ACCESS_KEY=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
